buildscript {
    apply from: 'dependency.gradle'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.springBootVersion}")
    }
}


subprojects { subproj ->
    buildscript {
        apply from: '../dependency.gradle'
        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.springBootVersion}")
            //classpath("com.junbo:junbo-gradle-plugin:1.1.3-SNAPSHOT")
        }
    }

    apply plugin: 'java'
    apply plugin: 'war'
    apply plugin: 'application'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply from: subproj.relativePath("../dependency.gradle")

    group = 'com.example.thread'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'
    targetCompatibility = 1.8

    jar {
        enabled = true
        excludes = ['**/rebel.xml', '**/.keep']
        doFirst {
            manifest = defaultManifest([
                    project      : subproj,
                    projectVendor: "com.jch.carmarket",
                    mainClassName: "com.jch.carmarket"
            ])
        }
        mainClassName = "com.jch.carmarket"
    }


    repositories {
        mavenCentral()
    }

    configurations {
        //
        // 所有需要忽略的包定义在此
        //
        all*.exclude group: 'commons-httpclient'
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
        all*.exclude module: 'spring-boot-starter-logging'
        all*.exclude module: 'logback-classic'
        all*.exclude module: 'log4j-over-slf4j'
        all*.exclude group: 'com.google.android', module: 'android'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-gateway:2.0.0.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-netflix:2.0.0.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-sleuth:2.0.0.RELEASE'
        }
    }

    dependencies {
        //  常用库依赖
        compile(
                libraries.'common-codec',
                libraries.'common-lang3',
                libraries.'commons-text',
                libraries.'log4j2',
                libraries.'spring-boot-json',
                libraries.'page-helper',
                libraries.'spring-web',
        )
        testCompile('org.springframework.boot:spring-boot-starter-test')
        //打开可能会引起在最外层生成module问题
//        providedCompile("org.springframework.boot:spring-boot-starter-tomcat")
    }

}


project(":spring-demo-thread") {
    dependencies {
        compile(
//                libraries.'mysql',
//                libraries.'page-helper',
//                libraries.'lombok',
                libraries.'dom4j',
//                libraries.'bouncycastle',
//                libraries.'poi',
//                libraries.'redis',
//                libraries.'httpclient',
                //libraries.'poi-ooxml',
//                libraries.'poi-scratchpad',
//                libraries.'poi-schemas',

        )
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${versions.springBootVersion}"
    }
}
